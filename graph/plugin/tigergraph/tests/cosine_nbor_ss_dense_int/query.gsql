set query_timeout = 600000
use graph xgraph
drop query cosinesim_ss_tg, code_str, cosinesim_ss_fpga, cosinesim_ss_test

create query code_str(vertex<patients> p, string e_str, int num) for graph xgraph returns (string){
    string res;
    ListAccum<uint> @@code_list;
    patientList = {p};
    property_list (ANY) = select a FROM patientList-(e_str:e)-:a
        ORDER BY a.CODE DESC
        LIMIT num;

    my_list (ANY) = select v FROM property_list:v
        ACCUM @@code_list += v.CODE;

    foreach item in @@code_list do
        concat_uint64_to_str(res, item);
    end;

    return res;
}

create query cosinesim_ss_tg() for graph xgraph {
    uint topK;
    double score;
    vertex<patients> newPatient;
    ListAccum<ListAccum<int> > @@patientsAll;
    ListAccum<testResults> @@result;
    FILE file1 ("PATH_REPO/plugin/tigergraph/tests/cosine_nbor_ss_dense_int/tg.txt");
    topK = 100;
# Patient Population
    population = {patients.*};
    patientList = select p from population:p
        ACCUM @@patientsAll += patient_vector(p);
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
# Cosine Similarity using TigerGraph
    @@result = cosinesim_ss_tigergraph(newPatient, topK);
    print "Cosine Sim using TigerGraph";
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER", 
            "#immunization", "immunizations", 
            "#allergy", "allergies", 
            "#condition", "conditions", 
            "#procedure", "procedures", 
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v 
        WHERE getvid(topKP.Id) == getvid(v) 
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER, 
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3), 
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}

create query cosinesim_ss_fpga() for graph xgraph {
    uint topK;
    vertex<patients> newPatient;
    ListAccum<testResults> @@result;
    ListAccum<testResults> @@result2;
    double score;
    FILE file1 ("PATH_REPO/plugin/tigergraph/tests/cosine_nbor_ss_dense_int/fpga.txt");
    FILE file2 ("PATH_REPO/plugin/tigergraph/tests/cosine_nbor_ss_dense_int/fpga2.txt");
    topK = 100;
# Patient Population
    population = {patients.*};
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
    print newPatient;
# Cosine Similarity using TigerGraph
    loadgraph_cosinesim_ss_fpga_core();
    @@result = cosinesim_ss_fpga_core(newPatient, topK);
    @@result2 = cosinesim_ss_fpga_core(newPatient, topK);
    print @@result2;
    print "Cosine Sim using Xilinx Alveo U50";
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file1.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
    file2.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result2 do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file2.println(score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}

create query cosinesim_ss_test() for graph xgraph {
    uint topK;
    double score;
    vertex<patients> newPatient;
    ListAccum<ListAccum<INT> > @@patientsAll;
    ListAccum<testResults> @@result_tg;
    ListAccum<testResults> @@result_fpga;
    ListAccum<int> @@newPatientVector;
    FILE file1 ("PATH_REPO/plugin/tigergraph/tests/cosine_nbor_ss_dense_int/tg.txt");
    FILE file2 ("PATH_REPO/plugin/tigergraph/tests/cosine_nbor_ss_dense_int/fpga.txt");
    topK = 100;
# Patient Population
    population = {patients.*};
    patientList = select p from population:p
        ACCUM @@patientsAll += patient_vector(p);
# Pick one random patient
    randomPatient = select p from population:p 
        Limit 10;
# Assign to a patient vertex
    randomPatient = select p from randomPatient:p
        ACCUM newPatient = p;
    @@newPatientVector = patient_vector(newPatient);
    print getvid(newPatient);
    print @@newPatientVector;
# Cosine Similarity using TigerGraph
    @@result_tg = cosinesim_ss_tigergraph(newPatient, topK);
    print "Cosine Sim using TigerGraph";
    loadgraph_cosinesim_ss_fpga_core();
    @@result_fpga = cosinesim_ss_fpga_core(newPatient, topK);
    print "Cosine Sim using Xilinx UDF";
    file1.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER", 
            "#immunization", "immunizations", 
            "#allergy", "allergies", 
            "#condition", "conditions", 
            "#procedure", "procedures", 
            "#careplan", "careplans");
    foreach topKP in @@result_tg do
        patientSet = select v from population:v 
        WHERE getvid(topKP.Id) == getvid(v) 
        ACCUM score = topKP.score
        POST-ACCUM file1.println(getvid(v), score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER, 
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3), 
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
    file2.println("SCORE", "FIRST_NAME", "LAST_NAME", "AGE", "RACE", "ETHNICITY", "GENDER",
            "#immunization", "immunizations",
            "#allergy", "allergies",
            "#condition", "conditions",
            "#procedure", "procedures",
            "#careplan", "careplans");
    foreach topKP in @@result_fpga do
        patientSet = select v from population:v
        WHERE getvid(topKP.Id) == getvid(v)
        ACCUM score = topKP.score
        POST-ACCUM file2.println(getvid(v), score, v.FIRST_NAME, v.LAST_NAME, patient_age(v), v.RACE, v.ETHNICITY,v.GENDER,
                v.outdegree("patient_HAD_immunization"), code_str(v, "patient_HAD_immunization", 3),
                v.outdegree("patient_HAD_allergy"), code_str(v, "patient_HAD_allergy", 3),
                v.outdegree("patient_HAD_condition"), code_str(v, "patient_HAD_condition", 3),
                v.outdegree("patient_HAD_procedure"), code_str(v, "patient_HAD_procedure", 3),
                v.outdegree("patient_HAD_careplan"), code_str(v, "patient_HAD_careplan", 3)
                );
    end;
}

install query code_str, cosinesim_ss_tg, cosinesim_ss_fpga, cosinesim_ss_test
